{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://quest-board-app/./public/src/utils/subjectUtils.js","webpack://quest-board-app/./public/src/state/appState.js","webpack://quest-board-app/./public/src/services/firebaseService.js","webpack://quest-board-app/./public/src/utils/dateUtils.js","webpack://quest-board-app/./public/src/services/taskService.js","webpack://quest-board-app/./public/src/utils/animationUtils.js","webpack://quest-board-app/./public/src/components/TaskCard.js","webpack://quest-board-app/./public/src/components/TodayTasks.js","webpack://quest-board-app/./public/src/components/StreakTracker.js","webpack://quest-board-app/./public/src/components/ChoreModal.js","webpack://quest-board-app/./public/src/app.js","webpack://quest-board-app/./public/src/components/TaskList.js","webpack://quest-board-app/./public/src/index.js"],"sourcesContent":["/**\n * subjectUtils.js - Subject handling utilities for Quest Board\n * Contains functions for subject colors, translations, and schedule mappings\n */\n\n/**\n * Default subject schedule mapping for different days of the week\n * Keys are subject names, values are arrays of day numbers (1-based, 1=Monday)\n */\nexport const DEFAULT_SCHEDULE = {\n  main: {\n    \"Math\": [1, 2, 3, 4], // Monday, Tuesday, Wednesday, Thursday\n    \"Eco\": [1, 4], // Monday, Thursday\n    \"Crafts\": [1], // Monday\n    \"PE\": [1, 2, 3], // Monday, Tuesday, Wednesday\n    \"Finnish\": [2, 3, 4, 5], // Tuesday, Wednesday, Thursday, Friday\n    \"History\": [2], // Tuesday\n    \"Music\": [2], // Tuesday\n    \"English\": [3, 4], // Wednesday, Thursday\n    \"Ethics\": [3], // Wednesday\n    \"Art\": [5], // Friday\n    \"Civics\": [5], // Friday\n    \"Digi\": [5]  // Friday\n  },\n  alternative: {} // Can be expanded for a second child's schedule\n};\n\n/**\n * Color mapping for subjects to ensure consistent visual representation\n */\nexport const SUBJECT_COLORS = {\n  'math': '#4361ee',\n  'finnish': '#4cc9f0',\n  'english': '#f72585',\n  'history': '#7209b7',\n  'civics': '#3a0ca3',\n  'ethics': '#4895ef',\n  'pe': '#560bad',\n  'music': '#b5179e',\n  'art': '#f15bb5',\n  'crafts': '#fee440',\n  'eco': '#06d6a0',\n  'digi': '#118ab2'\n};\n\n/**\n * Get a consistent color for a subject\n * @param {string} subject - The subject name\n * @returns {string} - A hex color code\n */\nexport function getSubjectColor(subject) {\n  // Normalize the subject name (lowercase)\n  const normalizedSubject = subject.toLowerCase();\n  \n  // Return the predefined color or generate one based on the subject string\n  if (SUBJECT_COLORS[normalizedSubject]) {\n    return SUBJECT_COLORS[normalizedSubject];\n  } else {\n    // Simple hash function to generate a consistent color from a string\n    let hash = 0;\n    for (let i = 0; i < normalizedSubject.length; i++) {\n      hash = normalizedSubject.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    \n    // Convert to a hex color\n    let color = '#';\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8)) & 0xFF;\n      color += ('00' + value.toString(16)).substr(-2);\n    }\n    \n    return color;\n  }\n}\n\n/**\n * Calculate the next class day for a given subject\n * @param {string} subject - The subject to check\n * @param {Object} scheduleConfig - The schedule configuration to use (optional)\n * @returns {Object} Information about the next class occurrence\n */\nexport function calculateNextClassDay(subject, scheduleConfig = DEFAULT_SCHEDULE) {\n  // Get the current date and day of week\n  const today = new Date();\n  const currentDayNumber = today.getDay(); // 0 (Sunday) to 6 (Saturday)\n  \n  // Convert to 1-based index where 1 is Monday (to match our schedule data)\n  // Sunday (0) becomes 7 in our system\n  const adjustedCurrentDay = currentDayNumber === 0 ? 7 : currentDayNumber;\n  \n  // Find which days this subject occurs on\n  // Normalize to lowercase for case-insensitive lookup\n  const subjectNormalized = subject.toLowerCase();\n  \n  // Access the main schedule by default, could be expanded to support multiple schedules\n  const schedule = scheduleConfig.main;\n  \n  // Find the subject in schedule (case-insensitive)\n  const subjectKey = Object.keys(schedule).find(key => \n    key.toLowerCase() === subjectNormalized\n  );\n  \n  if (!subjectKey) {\n    console.warn(`Subject ${subject} not found in the schedule`);\n    return {\n      found: false,\n      daysUntil: null,\n      nextDay: null,\n      dayName: null\n    };\n  }\n  \n  const classDays = schedule[subjectKey];\n  \n  if (!classDays || !classDays.length) {\n    console.warn(`No class days defined for subject ${subject}`);\n    return {\n      found: false,\n      daysUntil: null,\n      nextDay: null,\n      dayName: null\n    };\n  }\n  \n  // Sort the days to ensure we process them in order\n  const sortedClassDays = [...classDays].sort((a, b) => a - b);\n  \n  // Find the next occurrence\n  let nextDayNumber = null;\n  let daysUntil = Infinity;\n  \n  // First, check if there are any days remaining this week\n  for (const dayNumber of sortedClassDays) {\n    if (dayNumber > adjustedCurrentDay) {\n      nextDayNumber = dayNumber;\n      daysUntil = dayNumber - adjustedCurrentDay;\n      break;\n    }\n  }\n  \n  // If no days found later this week, wrap around to next week\n  if (nextDayNumber === null) {\n    nextDayNumber = sortedClassDays[0];\n    daysUntil = 7 - adjustedCurrentDay + nextDayNumber;\n  }\n  \n  // Convert day number to name\n  const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  // Convert from our 1-based (Monday is 1) to JS 0-based (Sunday is 0)\n  const jsDayNumber = nextDayNumber === 7 ? 0 : nextDayNumber;\n  const dayName = dayNames[jsDayNumber];\n  \n  return {\n    found: true,\n    daysUntil,\n    nextDay: nextDayNumber,\n    dayName\n  };\n}\n\n/**\n * Get friendly text for when the next class occurs\n * @param {string} subject - The subject to check\n * @returns {string} - Human readable text like \"Monday (in 3 days)\" or \"Not scheduled\"\n */\nexport function getNextClassText(subject) {\n  const nextClass = calculateNextClassDay(subject);\n  \n  if (!nextClass.found) {\n    return \"Not scheduled\";\n  }\n  \n  if (nextClass.daysUntil === 0) {\n    return \"Today\";\n  } else if (nextClass.daysUntil === 1) {\n    return \"Tomorrow\";\n  } else {\n    return `${nextClass.dayName} (in ${nextClass.daysUntil} days)`;\n  }\n}\n","/**\n * appState.js - Core state management for Quest Board\n * Defines the application state structure and default values\n */\n\n// Initial application state\nexport const initialState = {\n  students: [],\n  tasks: [],\n  activeFilter: 'all',\n  filteredLists: {},\n  showRecentOnly: false,\n  lastScrollPosition: 0,\n  showArchive: false,\n  streak: {\n    count: 0,\n    target: 7, // Target for a complete streak (e.g., 7 days)\n    lastActive: null\n  }\n};\n\n// Create subscribers collections\nconst subscribers = {\n  // Global subscribers (all state changes)\n  global: [],\n  \n  // Path-specific subscribers\n  paths: {},\n  \n  // Event-based subscribers\n  events: {}\n};\n\n// The current state (private)\nlet _state = { ...initialState };\n\n/**\n * Get the current state (immutable copy)\n * @returns {Object} A copy of the current state\n */\nexport function getState() {\n  return { ..._state };\n}\n\n/**\n * Get a specific slice of the state\n * @param {string} path - Dot-notation path to the state property\n * @returns {any} The state value at the specified path\n */\nexport function getStateSlice(path) {\n  if (!path) return getState();\n  \n  return path.split('.').reduce((obj, prop) => {\n    return obj && obj[prop] !== undefined ? obj[prop] : undefined;\n  }, _state);\n}\n\n/**\n * Update the state with a partial state object or function\n * @param {Object|Function} update - Partial state object or function that receives current state and returns updates\n * @param {string} [source] - Optional source identifier for debugging/tracking\n * @returns {Object} The new state\n */\nexport function setState(update, source = 'unknown') {\n  const prevState = { ..._state };\n  \n  // Handle function or object updates\n  if (typeof update === 'function') {\n    _state = { ..._state, ...update(_state) };\n  } else {\n    _state = { ..._state, ...update };\n  }\n  \n  // Find changed paths\n  const changedPaths = findChangedPaths(prevState, _state);\n  \n  // Notify subscribers\n  notifySubscribers(prevState, _state, changedPaths, source);\n  \n  return { ..._state };\n}\n\n/**\n * Subscribe to state changes\n * @param {Function} callback - Function to call on state change\n * @param {Object} options - Subscription options\n * @param {string} [options.path] - Dot-notation path to listen for changes\n * @param {string} [options.event] - Event name to listen for\n * @returns {Function} Unsubscribe function\n */\nexport function subscribe(callback, options = {}) {\n  if (!callback || typeof callback !== 'function') {\n    console.error('Invalid subscriber callback');\n    return () => {};\n  }\n  \n  const { path, event } = options;\n  \n  // Subscribe to a specific path\n  if (path) {\n    if (!subscribers.paths[path]) {\n      subscribers.paths[path] = [];\n    }\n    subscribers.paths[path].push(callback);\n    \n    return () => {\n      subscribers.paths[path] = subscribers.paths[path].filter(cb => cb !== callback);\n    };\n  }\n  \n  // Subscribe to a specific event\n  if (event) {\n    if (!subscribers.events[event]) {\n      subscribers.events[event] = [];\n    }\n    subscribers.events[event].push(callback);\n    \n    return () => {\n      subscribers.events[event] = subscribers.events[event].filter(cb => cb !== callback);\n    };\n  }\n  \n  // Global subscription (all state changes)\n  subscribers.global.push(callback);\n  \n  return () => {\n    subscribers.global = subscribers.global.filter(cb => cb !== callback);\n  };\n}\n\n/**\n * Dispatch an event to subscribers\n * @param {string} eventName - Name of the event\n * @param {any} payload - Event payload\n */\nexport function dispatch(eventName, payload) {\n  if (!eventName) {\n    console.error('Event name is required');\n    return;\n  }\n  \n  // Notify event subscribers\n  if (subscribers.events[eventName]) {\n    subscribers.events[eventName].forEach(callback => {\n      try {\n        callback(payload, eventName);\n      } catch (error) {\n        console.error(`Error in event subscriber for ${eventName}:`, error);\n      }\n    });\n  }\n}\n\n/**\n * Reset the state to initial values\n */\nexport function resetState() {\n  setState(initialState, 'reset');\n}\n\n/**\n * Load state from localStorage\n */\nexport function loadStateFromStorage() {\n  try {\n    const savedState = localStorage.getItem('questBoardState');\n    if (savedState) {\n      const parsedState = JSON.parse(savedState);\n      setState(parsedState, 'localStorage');\n    }\n  } catch (error) {\n    console.error('Error loading state from localStorage:', error);\n  }\n}\n\n/**\n * Save current state to localStorage\n * @param {Array} keys - Specific state keys to save (defaults to all)\n */\nexport function saveStateToStorage(keys = null) {\n  try {\n    let stateToSave = { ..._state };\n    \n    // If specific keys provided, only save those\n    if (keys && Array.isArray(keys) && keys.length > 0) {\n      stateToSave = keys.reduce((acc, key) => {\n        if (_state[key] !== undefined) {\n          acc[key] = _state[key];\n        }\n        return acc;\n      }, {});\n    }\n    \n    localStorage.setItem('questBoardState', JSON.stringify(stateToSave));\n  } catch (error) {\n    console.error('Error saving state to localStorage:', error);\n  }\n}\n\n// Helper functions\n\n/**\n * Find changed paths between two state objects\n * @param {Object} prevState - Previous state\n * @param {Object} newState - New state\n * @returns {Array} Array of dot-notation paths that changed\n */\nfunction findChangedPaths(prevState, newState, path = '', result = []) {\n  // If types are different, the entire path changed\n  if (typeof prevState !== typeof newState) {\n    result.push(path);\n    return result;\n  }\n  \n  // If not objects or arrays, check equality\n  if (typeof prevState !== 'object' || prevState === null || newState === null) {\n    if (prevState !== newState) {\n      result.push(path);\n    }\n    return result;\n  }\n  \n  // Handle arrays\n  if (Array.isArray(prevState) && Array.isArray(newState)) {\n    if (prevState.length !== newState.length) {\n      result.push(path);\n      return result;\n    }\n    \n    // For arrays, we simplify and consider any change a change to the whole array\n    for (let i = 0; i < prevState.length; i++) {\n      if (JSON.stringify(prevState[i]) !== JSON.stringify(newState[i])) {\n        result.push(path);\n        return result;\n      }\n    }\n    \n    return result;\n  }\n  \n  // For objects, recursively check each property\n  const allKeys = new Set([...Object.keys(prevState), ...Object.keys(newState)]);\n  \n  allKeys.forEach(key => {\n    const childPath = path ? `${path}.${key}` : key;\n    \n    if (!(key in prevState)) {\n      // New property added\n      result.push(childPath);\n    } else if (!(key in newState)) {\n      // Property removed\n      result.push(childPath);\n    } else {\n      // Property exists in both, check recursively\n      findChangedPaths(prevState[key], newState[key], childPath, result);\n    }\n  });\n  \n  return result;\n}\n\n/**\n * Notify subscribers of state changes\n * @param {Object} prevState - Previous state\n * @param {Object} newState - New state\n * @param {Array} changedPaths - Array of changed dot-notation paths\n * @param {string} source - Source of the state change\n */\nfunction notifySubscribers(prevState, newState, changedPaths, source) {\n  // Notify global subscribers\n  subscribers.global.forEach(callback => {\n    try {\n      callback(newState, prevState, { changedPaths, source });\n    } catch (error) {\n      console.error('Error in global state subscriber:', error);\n    }\n  });\n  \n  // Notify path-specific subscribers\n  if (changedPaths.length > 0) {\n    Object.keys(subscribers.paths).forEach(path => {\n      // Check if this path or any of its parents changed\n      const pathMatches = changedPaths.some(changedPath => {\n        return changedPath === path || \n               changedPath.startsWith(`${path}.`) || \n               path.startsWith(`${changedPath}.`);\n      });\n      \n      if (pathMatches) {\n        const pathValue = getStateSlice(path);\n        const prevPathValue = path.split('.').reduce((obj, prop) => {\n          return obj && obj[prop] !== undefined ? obj[prop] : undefined;\n        }, prevState);\n        \n        subscribers.paths[path].forEach(callback => {\n          try {\n            callback(pathValue, prevPathValue, { path, source });\n          } catch (error) {\n            console.error(`Error in path subscriber for ${path}:`, error);\n          }\n        });\n      }\n    });\n  }\n}\n","/**\n * firebaseService.js - Firebase integration for Quest Board\n * Centralizes Firebase initialization and provides Firebase modules\n */\n\n// Firebase module cache\nlet _firebaseModules = null;\nlet _db = null;\nlet _initialized = false;\nlet _initPromise = null;\n\n/**\n * Wait for Firebase to be initialized\n * @returns {Promise} Resolves when Firebase is ready\n */\nexport function waitForFirebase() {\n  // Return existing promise if already initializing\n  if (_initPromise) {\n    return _initPromise;\n  }\n  \n  _initPromise = new Promise((resolve, reject) => {\n    // Check if Firebase is already available\n    if (_initialized && _db && _firebaseModules) {\n      console.log('Firebase already initialized and available');\n      resolve({ db: _db, modules: _firebaseModules });\n      return;\n    }\n    \n    // If window.db is already set up by index.html\n    if (window.db && window.firebaseModules) {\n      console.log('Firebase already initialized by index.html');\n      _db = window.db;\n      _firebaseModules = window.firebaseModules;\n      _initialized = true;\n      resolve({ db: _db, modules: _firebaseModules });\n      return;\n    }\n    \n    console.log('Waiting for Firebase to initialize...');\n    \n    // Create a listener that will clean itself up\n    const firebaseReadyListener = () => {\n      console.log('Firebase ready event received');\n      if (window.db && window.firebaseModules) {\n        _db = window.db;\n        _firebaseModules = window.firebaseModules;\n        _initialized = true;\n        clearTimeout(timeoutId);\n        resolve({ db: _db, modules: _firebaseModules });\n      } else {\n        console.error('Firebase ready event received but modules not available');\n        clearTimeout(timeoutId);\n        reject(new Error('Firebase initialized but modules not available'));\n      }\n    };\n    \n    // Add event listener\n    window.addEventListener('firebase-ready', firebaseReadyListener, { once: true });\n    \n    // Set a timeout in case Firebase initialization fails\n    const timeoutId = setTimeout(() => {\n      // Remove event listener to avoid memory leaks\n      window.removeEventListener('firebase-ready', firebaseReadyListener);\n      \n      if (!window.db || !window.firebaseModules) {\n        console.error('Firebase initialization timed out after 8 seconds');\n        \n        // Attempt to reinitialize Firebase\n        try {\n          document.getElementById('loading-indicator').innerHTML = `\n            <div class=\"error-message\">\n              <p>Connection to database timed out. Please check your internet connection.</p>\n              <button onclick=\"location.reload()\" class=\"primary-btn\">Retry</button>\n            </div>\n          `;\n        } catch (e) {\n          console.error('Could not update loading indicator:', e);\n        }\n        \n        reject(new Error('Firebase initialization timed out'));\n      }\n    }, 8000);\n  });\n  \n  return _initPromise;\n}\n\n/**\n * Get the initialized Firestore database instance\n * @returns {Object} Firestore database instance\n * @throws {Error} If Firebase is not initialized\n */\nexport function getFirestore() {\n  if (!_initialized || !_db) {\n    throw new Error('Firebase not initialized. Call waitForFirebase() first.');\n  }\n  return _db;\n}\n\n/**\n * Get Firebase modules for direct use\n * @returns {Object} Firebase modules (collection, getDocs, etc.)\n * @throws {Error} If Firebase is not initialized\n */\nexport function getFirebaseModules() {\n  if (!_initialized || !_firebaseModules) {\n    throw new Error('Firebase not initialized. Call waitForFirebase() first.');\n  }\n  return _firebaseModules;\n}\n\n// Cache for query results\nconst _queryCache = new Map();\n\n/**\n * Clear the query cache or a specific cached query\n * @param {string} [cacheKey] - Optional specific cache key to clear\n */\nexport function clearCache(cacheKey = null) {\n  if (cacheKey) {\n    _queryCache.delete(cacheKey);\n  } else {\n    _queryCache.clear();\n  }\n}\n\n/**\n * Generate a cache key for a collection and optional query parameters\n * @param {string} collectionName - Name of the collection\n * @param {Object} [queryParams] - Optional query parameters\n * @returns {string} Cache key\n */\nfunction generateCacheKey(collectionName, queryParams = null) {\n  return queryParams \n    ? `${collectionName}:${JSON.stringify(queryParams)}`\n    : collectionName;\n}\n\n/**\n * Fetch all documents from a collection with optional caching\n * @param {string} collectionName - Name of the collection to fetch\n * @param {Object} options - Options for the fetch operation\n * @param {boolean} [options.useCache=true] - Whether to use cache for this query\n * @param {number} [options.cacheTTL=60000] - Cache time-to-live in milliseconds (default: 1 minute)\n * @returns {Promise<Array>} Array of documents with their IDs\n */\nexport async function fetchCollection(collectionName, options = {}) {\n  await waitForFirebase();\n  \n  const { useCache = true, cacheTTL = 60000 } = options;\n  const cacheKey = generateCacheKey(collectionName);\n  \n  // Check cache first if enabled\n  if (useCache && _queryCache.has(cacheKey)) {\n    const cached = _queryCache.get(cacheKey);\n    if (cached.expiry > Date.now()) {\n      return [...cached.data]; // Return a copy to prevent mutation\n    }\n    // Cache expired, remove it\n    _queryCache.delete(cacheKey);\n  }\n  \n  try {\n    const { collection, getDocs } = _firebaseModules;\n    const querySnapshot = await getDocs(collection(_db, collectionName));\n    \n    const documents = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    // Cache the result if caching is enabled\n    if (useCache) {\n      _queryCache.set(cacheKey, {\n        data: documents,\n        expiry: Date.now() + cacheTTL\n      });\n    }\n    \n    return documents;\n    \n  } catch (error) {\n    console.error(`Error fetching collection ${collectionName}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Fetch a document by ID\n * @param {string} collectionName - Name of the collection\n * @param {string} documentId - ID of the document to fetch\n * @param {Object} options - Options for the fetch operation\n * @param {boolean} [options.useCache=true] - Whether to use cache for this query\n * @param {number} [options.cacheTTL=60000] - Cache time-to-live in milliseconds (default: 1 minute)\n * @returns {Promise<Object>} Document data including ID\n */\nexport async function fetchDocument(collectionName, documentId, options = {}) {\n  await waitForFirebase();\n  \n  const { useCache = true, cacheTTL = 60000 } = options;\n  const cacheKey = generateCacheKey(`${collectionName}/${documentId}`);\n  \n  // Check cache first if enabled\n  if (useCache && _queryCache.has(cacheKey)) {\n    const cached = _queryCache.get(cacheKey);\n    if (cached.expiry > Date.now()) {\n      return { ...cached.data }; // Return a copy to prevent mutation\n    }\n    // Cache expired, remove it\n    _queryCache.delete(cacheKey);\n  }\n  \n  try {\n    const { doc, getDoc } = _firebaseModules;\n    const docRef = doc(_db, collectionName, documentId);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      const document = {\n        id: docSnap.id,\n        ...docSnap.data()\n      };\n      \n      // Cache the result if caching is enabled\n      if (useCache) {\n        _queryCache.set(cacheKey, {\n          data: document,\n          expiry: Date.now() + cacheTTL\n        });\n      }\n      \n      return document;\n    } else {\n      console.warn(`Document ${documentId} in ${collectionName} not found`);\n      return null;\n    }\n    \n  } catch (error) {\n    console.error(`Error fetching document ${documentId} from ${collectionName}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Update a document in a collection\n * @param {string} collectionName - Name of the collection\n * @param {string} documentId - ID of the document to update\n * @param {Object} data - Data to update in the document\n * @returns {Promise<void>}\n */\nexport async function updateDocument(collectionName, documentId, data) {\n  await waitForFirebase();\n  \n  try {\n    const { doc, updateDoc } = _firebaseModules;\n    const docRef = doc(_db, collectionName, documentId);\n    \n    await updateDoc(docRef, data);\n    \n    // Clear cache for this document\n    clearCache(generateCacheKey(`${collectionName}/${documentId}`));\n    // Also clear the collection cache as it's now outdated\n    clearCache(generateCacheKey(collectionName));\n    \n    return { id: documentId, ...data };\n  } catch (error) {\n    console.error(`Error updating document ${documentId} in ${collectionName}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Set a document in a collection (creates or overwrites)\n * @param {string} collectionName - Name of the collection\n * @param {string} documentId - ID of the document to set\n * @param {Object} data - Data for the document\n * @returns {Promise<void>}\n */\nexport async function setDocument(collectionName, documentId, data) {\n  await waitForFirebase();\n  \n  try {\n    const { doc, setDoc } = _firebaseModules;\n    const docRef = doc(_db, collectionName, documentId);\n    \n    await setDoc(docRef, data);\n    \n    // Clear cache for this document\n    clearCache(generateCacheKey(`${collectionName}/${documentId}`));\n    // Also clear the collection cache as it's now outdated\n    clearCache(generateCacheKey(collectionName));\n    \n    return { id: documentId, ...data };\n  } catch (error) {\n    console.error(`Error setting document ${documentId} in ${collectionName}:`, error);\n    throw error;\n  }\n}\n","/**\n * dateUtils.js - Date handling utilities for Quest Board\n * Contains functions for date parsing, formatting, and comparison\n */\n\n/**\n * Get today's date in Finnish format (DD.MM.YYYY)\n * @returns {string} Today's date in Finnish format\n */\nexport function getTodayFinDate() {\n  const today = new Date();\n  return `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;\n}\n\n/**\n * Parse a Finnish format date string (DD.MM.YYYY) into a JavaScript Date object\n * @param {string} finDate - Date string in Finnish format (DD.MM.YYYY)\n * @returns {Date} JavaScript Date object\n */\nexport function parseFinDate(finDate) {\n  // Handle invalid input\n  if (!finDate || typeof finDate !== 'string') {\n    console.error('Invalid date format received:', finDate);\n    return new Date(); // Return today as fallback\n  }\n  \n  try {\n    // Basic validation for Finnish date format DD.MM.YYYY\n    if (!/^\\d{1,2}\\.\\d{1,2}\\.\\d{4}$/.test(finDate)) {\n      console.warn('Date format does not match DD.MM.YYYY:', finDate);\n      // Try to be flexible and do our best to parse it anyway\n    }\n    \n    // Split the date into components\n    const [day, month, year] = finDate.split('.').map(part => parseInt(part, 10));\n    \n    // Validate day, month, and year values\n    const isValidDay = day >= 1 && day <= 31;\n    const isValidMonth = month >= 1 && month <= 12;\n    const isValidYear = year >= 1000 && year <= 9999;\n    \n    if (!isValidDay || !isValidMonth || !isValidYear) {\n      console.error('Invalid date components:', { day, month, year });\n      return new Date(); // Return today as fallback\n    }\n    \n    // Create a new Date (months are 0-indexed in JS Date)\n    const dateObj = new Date(year, month - 1, day);\n    \n    // Check if date is valid (for example, 31.04.2023 would become 01.05.2023)\n    if (dateObj.getDate() !== day) {\n      console.warn('Date was adjusted by browser:', { \n        original: finDate, \n        adjusted: `${dateObj.getDate()}.${dateObj.getMonth() + 1}.${dateObj.getFullYear()}`\n      });\n    }\n    \n    return dateObj;\n  } catch (error) {\n    console.error('Error parsing date:', error, finDate);\n    return new Date(); // Return today as fallback\n  }\n}\n\n/**\n * Compare two dates and determine their relation\n * @param {string} date1 - First date in Finnish format\n * @param {string} date2 - Second date in Finnish format\n * @returns {number} -1 if date1 is before date2, 0 if equal, 1 if date1 is after date2\n */\nexport function compareDates(date1, date2) {\n  const d1 = parseFinDate(date1);\n  const d2 = parseFinDate(date2);\n  \n  // Reset time parts for accurate date comparison\n  d1.setHours(0, 0, 0, 0);\n  d2.setHours(0, 0, 0, 0);\n  \n  if (d1 < d2) return -1;\n  if (d1 > d2) return 1;\n  return 0;\n}\n\n/**\n * Format a date as a relative timeframe (Today, Tomorrow, n days)\n * @param {string} finDate - Date in Finnish format\n * @param {string} todayDate - Today's date in Finnish format (optional)\n * @returns {string} Human-readable relative date\n */\nexport function getRelativeDateText(finDate, todayDate = getTodayFinDate()) {\n  const comparison = compareDates(finDate, todayDate);\n  \n  if (comparison === 0) return 'Today';\n  \n  const date = parseFinDate(finDate);\n  const today = parseFinDate(todayDate);\n  \n  // Calculate difference in days\n  const diffTime = Math.abs(date - today);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  if (comparison === 1) {\n    if (diffDays === 1) return 'Tomorrow';\n    if (diffDays < 7) return `In ${diffDays} days`;\n    return finDate; // Just return the date for dates far in the future\n  } else {\n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    return finDate; // Just return the date for dates far in the past\n  }\n}\n\n/**\n * Check if a date is today\n * @param {string} finDate - Date in Finnish format\n * @returns {boolean} True if the date is today\n */\nexport function isToday(finDate) {\n  return compareDates(finDate, getTodayFinDate()) === 0;\n}\n\n/**\n * Check if a date is tomorrow\n * @param {string} finDate - Date in Finnish format\n * @returns {boolean} True if the date is tomorrow\n */\nexport function isTomorrow(finDate) {\n  const today = parseFinDate(getTodayFinDate());\n  const tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  \n  const tomorrowFin = `${tomorrow.getDate().toString().padStart(2, '0')}.${(tomorrow.getMonth() + 1).toString().padStart(2, '0')}.${tomorrow.getFullYear()}`;\n  \n  return compareDates(finDate, tomorrowFin) === 0;\n}\n","/**\n * taskService.js - Task management services for Quest Board\n * Provides methods for CRUD operations on tasks via Firebase\n */\n\nimport { \n  fetchCollection, \n  fetchDocument,\n  updateDocument,\n  setDocument\n} from './firebaseService.js';\nimport { getState, setState, dispatch } from '../state/appState.js';\nimport { parseFinDate, getTodayFinDate, compareDates } from '../utils/dateUtils.js';\n\n/**\n * Load tasks from Firestore\n * @param {Object} options - Options for loading tasks\n * @param {boolean} [options.useCache=true] - Whether to use cache for this query\n * @returns {Promise<Array>} Array of loaded tasks\n */\nexport async function loadTasks(options = { useCache: true }) {\n  try {\n    const tasks = await fetchCollection('tasks', options);\n    \n    // Update application state with the loaded tasks\n    setState({ tasks }, 'taskService.loadTasks');\n    \n    // Dispatch loaded event\n    dispatch('tasks-loaded', tasks);\n    \n    return tasks;\n  } catch (error) {\n    console.error('Error loading tasks:', error);\n    throw error;\n  }\n}\n\n/**\n * Load students from Firestore\n * @param {Object} options - Options for loading students\n * @param {boolean} [options.useCache=true] - Whether to use cache for this query\n * @returns {Promise<Array>} Array of loaded students\n */\nexport async function loadStudents(options = { useCache: true }) {\n  try {\n    const students = await fetchCollection('students', options);\n    \n    // Update application state with the loaded students\n    setState({ students }, 'taskService.loadStudents');\n    \n    // Dispatch loaded event\n    dispatch('students-loaded', students);\n    \n    return students;\n  } catch (error) {\n    console.error('Error loading students:', error);\n    throw error;\n  }\n}\n\n/**\n * Add a new task (chore)\n * @param {Object} choreData - Data for the new chore\n * @param {string} choreData.description - Description of the chore\n * @param {number} choreData.points - Points for completing the chore\n * @returns {Promise<Object>} The newly created task\n */\nexport async function addChore(choreData) {\n  try {\n    if (!choreData.description || !choreData.points) {\n      throw new Error('Chore description and points are required');\n    }\n\n    // Create a timestamp for the task\n    const timestamp = Date.now();\n    \n    // Get today's date in Finnish format\n    const today = getTodayFinDate();\n    \n    // Create the task object\n    const newTask = {\n      description: choreData.description,\n      assignDate: today, // Today's date\n      dueDate: today, // Due today\n      points: parseInt(choreData.points),\n      completed: false,\n      type: 'chore',\n      createdAt: timestamp,\n      updatedAt: timestamp\n    };\n    \n    // Generate a unique ID for the task\n    const taskId = `chore_${timestamp}`;\n    \n    // Save to Firestore\n    await setDocument('tasks', taskId, newTask);\n    \n    // Add ID to the task object\n    const taskWithId = { id: taskId, ...newTask };\n    \n    // Update local state\n    const currentTasks = getState().tasks || [];\n    setState({ \n      tasks: [...currentTasks, taskWithId] \n    }, 'taskService.addChore');\n    \n    // Dispatch task added event\n    dispatch('task-added', taskWithId);\n    \n    return taskWithId;\n    \n  } catch (error) {\n    console.error('Error adding chore:', error);\n    throw error;\n  }\n}\n\n/**\n * Complete a task\n * @param {string} taskId - ID of the task to complete\n * @returns {Promise<Object>} The updated task\n */\nexport async function completeTask(taskId) {\n  try {\n    // Get the current state\n    const state = getState();\n    const { tasks, students } = state;\n    \n    // Find the task in state\n    const taskIndex = tasks.findIndex(task => task.id === taskId);\n    \n    if (taskIndex === -1) {\n      throw new Error(`Task with ID ${taskId} not found`);\n    }\n    \n    const task = tasks[taskIndex];\n    \n    // Get today's date in Finnish format\n    const today = getTodayFinDate();\n    \n    // Update task data\n    const updatedTask = {\n      ...task,\n      completed: true,\n      completedDate: today,\n      updatedAt: Date.now()\n    };\n    \n    // Update in Firestore\n    await updateDocument('tasks', taskId, {\n      completed: true,\n      completedDate: today,\n      updatedAt: Date.now()\n    });\n    \n    // Update student points if needed\n    if (students && students.length > 0) {\n      // Assuming the first student is the active one\n      const student = students[0];\n      \n      // Calculate new points\n      const newPoints = (student.points || 0) + (task.points || 0);\n      \n      // Update student in Firestore\n      await updateDocument('students', student.id, {\n        points: newPoints,\n        updatedAt: Date.now()\n      });\n      \n      // Update student in state\n      const updatedStudents = students.map(s => \n        s.id === student.id ? { ...s, points: newPoints } : s\n      );\n      \n      setState({ students: updatedStudents }, 'taskService.completeTask');\n    }\n    \n    // Update task in state\n    const updatedTasks = [...tasks];\n    updatedTasks[taskIndex] = updatedTask;\n    \n    setState({ tasks: updatedTasks }, 'taskService.completeTask');\n    \n    // Dispatch task completed event\n    dispatch('task-completed', updatedTask);\n    \n    return updatedTask;\n    \n  } catch (error) {\n    console.error('Error completing task:', error);\n    throw error;\n  }\n}\n\n/**\n * Get tasks filtered by various criteria\n * @param {Object} options - Filter options\n * @param {string} [options.filter='all'] - Filter type ('all', 'subjects', 'chores')\n * @param {boolean} [options.showRecentOnly=false] - Show only recent tasks\n * @param {boolean} [options.showArchive=false] - Show archived tasks\n * @returns {Object} Filtered tasks organized by container\n */\nexport function getFilteredTasks(options = {}) {\n  const { filter = 'all', showRecentOnly = false, showArchive = false } = options;\n  \n  // Get tasks from state\n  const tasks = getState().tasks || [];\n  \n  // Today's date for comparison\n  const todayFormatted = getTodayFinDate();\n  \n  // Filter tasks by completed status and date\n  const allTasks = tasks.filter(task => {\n    const dueDate = task.dueDate;\n    \n    // Skip tasks without a due date\n    if (!dueDate) return false;\n    \n    // Apply the \"recent only\" filter if active\n    if (showRecentOnly) {\n      const taskDate = parseFinDate(dueDate);\n      const today = new Date();\n      \n      // Calculate days difference\n      const diffTime = Math.abs(today - taskDate);\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      // Only show tasks within last 14 days\n      if (diffDays > 14) return false;\n    }\n    \n    // Apply type filter\n    if (filter === 'subjects') {\n      return task.type === 'subject';\n    } else if (filter === 'chores') {\n      return task.type === 'chore';\n    }\n    \n    // Filter is 'all'\n    return true;\n  });\n  \n  // Separate current from archive based on task age\n  const { current, archive } = getTaskContainers(allTasks);\n  \n  // Return the appropriate container based on showArchive flag\n  return {\n    tasks: showArchive ? archive : current,\n    archiveCount: archive.length,\n    currentCount: current.length\n  };\n}\n\n/**\n * Get task containers (current and archive) based on task age\n * @param {Array} tasks - Array of tasks to sort\n * @returns {Object} Object with current and archive task arrays\n */\nexport function getTaskContainers(tasks) {\n  const current = [];\n  const archive = [];\n  \n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  \n  const thresholdDate = new Date(today);\n  thresholdDate.setDate(today.getDate() - 14); // Two weeks ago\n  \n  tasks.forEach(task => {\n    // Try to get the date to use for sorting\n    // Prefer completedDate for completed tasks, otherwise use dueDate\n    const dateToUse = task.completed ? \n      (task.completedDate || task.dueDate) : \n      task.dueDate;\n    \n    if (!dateToUse) {\n      // Default to current if no date available\n      current.push(task);\n      return;\n    }\n    \n    // Parse the date\n    const taskDate = parseFinDate(dateToUse);\n    \n    // If date parsing failed, default to current\n    if (!taskDate) {\n      current.push(task);\n      return;\n    }\n    \n    // Clear time part for accurate date comparison\n    taskDate.setHours(0, 0, 0, 0);\n    \n    // If the task is completed and older than the threshold, put in archive\n    if (task.completed && taskDate < thresholdDate) {\n      archive.push(task);\n    } else {\n      current.push(task);\n    }\n  });\n  \n  return { current, archive };\n}\n\n/**\n * Group tasks by their due date\n * @param {Array} tasks - Array of tasks to group\n * @returns {Object} Object with tasks grouped by due date\n */\nexport function groupTasksByDueDate(tasks) {\n  // Get today's date for comparison\n  const todayFormatted = getTodayFinDate();\n  \n  // Group tasks by due date\n  return tasks.reduce((groups, task) => {\n    // Skip tasks without a due date\n    if (!task.dueDate) return groups;\n    \n    // Get or create the group for this date\n    if (!groups[task.dueDate]) {\n      groups[task.dueDate] = [];\n    }\n    \n    // Add task to its date group\n    groups[task.dueDate].push(task);\n    \n    return groups;\n  }, {});\n}\n\n/**\n * Group tasks by their next class day\n * @param {Array} tasks - Array of tasks to group\n * @returns {Object} Object with tasks grouped by next class occurrence\n */\nexport function groupTasksByNextClass(tasks) {\n  // Filter subject tasks that aren't completed\n  const subjectTasks = tasks.filter(task => \n    task.type === 'subject' && !task.completed\n  );\n  \n  // Group the tasks using the task.subject property\n  const groupedBySubject = subjectTasks.reduce((groups, task) => {\n    if (!task.subject) return groups;\n    \n    if (!groups[task.subject]) {\n      groups[task.subject] = [];\n    }\n    \n    groups[task.subject].push(task);\n    \n    return groups;\n  }, {});\n  \n  return groupedBySubject;\n}\n","/**\n * animationUtils.js - Animation utilities for Quest Board\n * Handles completion and celebration animations for positive reinforcement\n */\n\n// Create confetti effect for celebrations\nexport function createConfetti() {\n  const confettiContainer = document.getElementById('confetti') || document.body;\n  const colors = ['#4361ee', '#4895ef', '#f72585', '#4cc9f0', '#3a0ca3'];\n  const confettiCount = 150;\n  const gravity = 0.5;\n  const terminalVelocity = 5;\n  const drag = 0.075;\n  \n  // Create confetti pieces\n  for (let i = 0; i < confettiCount; i++) {\n    const confetti = document.createElement('div');\n    confetti.className = 'confetti-piece';\n    confetti.style.position = 'absolute';\n    confetti.style.zIndex = '100';\n    confetti.style.width = `${Math.random() * 10 + 5}px`;\n    confetti.style.height = `${Math.random() * 5 + 3}px`;\n    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n    confetti.style.opacity = Math.random() + 0.5;\n    confetti.style.borderRadius = '2px';\n    confetti.style.pointerEvents = 'none';\n    \n    // Initial position - centered horizontally, from the top\n    const startPositionX = confettiContainer.offsetWidth / 2;\n    const startPositionY = -20;\n    \n    // Random initial velocity\n    const velocityX = (Math.random() * 2 - 1) * 15;\n    const velocityY = (Math.random() * 2 + 2) * 5;\n    \n    confetti.style.left = `${startPositionX}px`;\n    confetti.style.top = `${startPositionY}px`;\n    \n    // Append to container\n    confettiContainer.appendChild(confetti);\n    \n    // Animate the confetti piece\n    const maxHeight = confettiContainer.offsetHeight;\n    let positionX = startPositionX;\n    let positionY = startPositionY;\n    let currentVelocityX = velocityX;\n    let currentVelocityY = velocityY;\n    let rotation = 0;\n    \n    // Animation loop\n    const animate = () => {\n      // Update position\n      positionX += currentVelocityX;\n      positionY += currentVelocityY;\n      \n      // Apply gravity\n      currentVelocityY += gravity;\n      \n      // Apply drag\n      currentVelocityX *= (1 - drag);\n      \n      // Terminal velocity (don't accelerate forever)\n      if (currentVelocityY > terminalVelocity) {\n        currentVelocityY = terminalVelocity;\n      }\n      \n      // Add some rotation\n      rotation += Math.random() * 10;\n      \n      // Update confetti position\n      confetti.style.transform = `translate(${currentVelocityX}px, ${currentVelocityY}px) rotate(${rotation}deg)`;\n      confetti.style.left = `${positionX}px`;\n      confetti.style.top = `${positionY}px`;\n      \n      // Stop animation when confetti is out of view\n      if (positionY < maxHeight) {\n        requestAnimationFrame(animate);\n      } else {\n        // Remove the confetti element after animation is done\n        setTimeout(() => {\n          confetti.remove();\n        }, 100);\n      }\n    };\n    \n    // Start animation with a slight stagger\n    setTimeout(() => {\n      requestAnimationFrame(animate);\n    }, Math.random() * 500);\n  }\n}\n\n// Play completion animation on a task element\nexport async function playCompletionAnimation(element) {\n  return new Promise((resolve) => {\n    // Clone the element to keep the original in the DOM\n    const elementRect = element.getBoundingClientRect();\n    const clone = element.cloneNode(true);\n    \n    // Style the clone for animation\n    clone.style.position = 'fixed';\n    clone.style.left = `${elementRect.left}px`;\n    clone.style.top = `${elementRect.top}px`;\n    clone.style.width = `${elementRect.width}px`;\n    clone.style.height = `${elementRect.height}px`;\n    clone.style.margin = '0';\n    clone.style.zIndex = '1000';\n    clone.style.transition = 'transform 0.5s ease, opacity 0.5s ease';\n    clone.style.pointerEvents = 'none'; // Prevent interaction with the clone\n    \n    // Append to body\n    document.body.appendChild(clone);\n    \n    // Add completed styling to original element\n    element.classList.add('completed-quest');\n    \n    // Create and add completion stamp\n    const stamp = document.createElement('div');\n    stamp.className = 'completed-stamp';\n    stamp.textContent = 'DONE';\n    element.appendChild(stamp);\n    \n    // Force reflow to ensure animation works\n    void clone.offsetWidth;\n    \n    // Start animation\n    clone.style.transform = 'scale(1.05)';\n    clone.style.opacity = '0';\n    \n    // Clean up after animation\n    setTimeout(() => {\n      clone.remove();\n      resolve();\n    }, 500);\n  });\n}\n\n// Add bounce animation to an element\nexport function addBounceEffect(element) {\n  element.classList.add('bounce');\n  setTimeout(() => {\n    element.classList.remove('bounce');\n  }, 1000);\n}\n\n// Apply a pulse effect to celebrate an achievement\nexport function celebratePulse(element) {\n  element.classList.add('celebrate-pulse');\n  setTimeout(() => {\n    element.classList.remove('celebrate-pulse');\n  }, 1500);\n}\n\n// Initialize animation styles\nexport function initAnimationStyles() {\n  // Check if styles already exist\n  if (document.getElementById('animation-styles')) {\n    return;\n  }\n  \n  const styleSheet = document.createElement('style');\n  styleSheet.id = 'animation-styles';\n  styleSheet.textContent = `\n    @keyframes bounce {\n      0%, 20%, 50%, 80%, 100% {transform: translateY(0);}\n      40% {transform: translateY(-20px);}\n      60% {transform: translateY(-10px);}\n    }\n    \n    .bounce {\n      animation: bounce 1s ease;\n    }\n    \n    @keyframes celebratePulse {\n      0% {transform: scale(1);}\n      25% {transform: scale(1.1);}\n      50% {transform: scale(1);}\n      75% {transform: scale(1.05);}\n      100% {transform: scale(1);}\n    }\n    \n    .celebrate-pulse {\n      animation: celebratePulse 1.5s ease;\n    }\n  `;\n  document.head.appendChild(styleSheet);\n}\n","/**\n * TaskCard.js - Task Card Component\n * Encapsulates the creation and event handling of individual task cards\n */\n\nimport { playCompletionAnimation } from '../utils/animationUtils.js';\nimport { getSubjectColor } from '../utils/subjectUtils.js';\nimport { completeTask } from '../services/taskService.js';\n\n/**\n * Create a task card element\n * @param {Object} task - Task data\n * @param {Function} onCompleted - Callback when task is completed\n * @returns {HTMLElement} The task card DOM element\n */\nexport function createTaskCard(task, onCompleted) {\n  const taskCard = document.createElement('div');\n  taskCard.className = `quest-card ${task.completed ? 'completed-quest' : ''}`;\n  taskCard.dataset.id = task.id;\n  taskCard.dataset.type = task.type || 'unknown';\n  \n  // Create and append content\n  taskCard.innerHTML = createTaskCardContent(task);\n  \n  // Add event listeners\n  if (!task.completed) {\n    const completeBtn = taskCard.querySelector('.complete-btn');\n    if (completeBtn) {\n      completeBtn.addEventListener('click', async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        // Disable button to prevent multiple clicks\n        completeBtn.disabled = true;\n        \n        try {\n          // Complete the task in the backend\n          await completeTask(task.id);\n          \n          // Play completion animation\n          await playCompletionAnimation(taskCard);\n          \n          // Callback to notify task completion\n          if (onCompleted && typeof onCompleted === 'function') {\n            onCompleted(task.id);\n          }\n        } catch (error) {\n          console.error('Error completing task:', error);\n          // Re-enable button if completion failed\n          completeBtn.disabled = false;\n        }\n      });\n    }\n  }\n  \n  return taskCard;\n}\n\n/**\n * Generate the HTML content for a task card\n * @param {Object} task - Task data\n * @returns {string} HTML content\n */\nfunction createTaskCardContent(task) {\n  // Get subject color for styling\n  const color = task.subject ? getSubjectColor(task.subject) : '#6c757d';\n  \n  // Create a colored border based on subject or default\n  const cardStyle = task.subject ? \n    `border-left: 4px solid ${color};` : \n    '';\n  \n  // Format the points display\n  const pointsText = task.points ? `${task.points} pts` : '';\n  \n  // Create the card content\n  return `\n    <div class=\"quest-card-inner\" style=\"${cardStyle}\">\n      <div class=\"quest-card-content\">\n        <div class=\"quest-card-header\">\n          ${task.subject ? `<div class=\"quest-subject\" style=\"background-color: ${color};\">${task.subject}</div>` : ''}\n          ${task.type === 'chore' ? '<div class=\"quest-type\">Chore</div>' : ''}\n          ${task.completed ? '<div class=\"completed-stamp\">DONE</div>' : ''}\n        </div>\n        <div class=\"quest-description\">${task.description}</div>\n        <div class=\"quest-meta\">\n          ${pointsText ? `<div class=\"quest-points\">${pointsText}</div>` : ''}\n          ${task.completed && task.completedDate ? \n            `<div class=\"quest-completed-date\">Completed: ${task.completedDate}</div>` : ''}\n        </div>\n      </div>\n      ${!task.completed ? `\n        <button class=\"complete-btn\" aria-label=\"Complete task\">\n          <i class=\"ri-check-line\"></i>\n        </button>\n      ` : ''}\n    </div>\n  `;\n}\n\n/**\n * Update an existing task card with new data\n * @param {HTMLElement} cardElement - The existing card element\n * @param {Object} updatedTask - Updated task data \n */\nexport function updateTaskCard(cardElement, updatedTask) {\n  if (!cardElement || !updatedTask) return;\n  \n  // Update content\n  cardElement.innerHTML = createTaskCardContent(updatedTask);\n  \n  // Update class for completed state\n  if (updatedTask.completed) {\n    cardElement.classList.add('completed-quest');\n  } else {\n    cardElement.classList.remove('completed-quest');\n  }\n  \n  // Re-add event listeners if needed\n  if (!updatedTask.completed) {\n    const completeBtn = cardElement.querySelector('.complete-btn');\n    if (completeBtn) {\n      completeBtn.addEventListener('click', async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        // Disable button to prevent multiple clicks\n        completeBtn.disabled = true;\n        \n        try {\n          // Complete the task in the backend\n          await completeTask(updatedTask.id);\n          \n          // Play completion animation\n          await playCompletionAnimation(cardElement);\n          \n          // Reload tasks or update UI\n          document.dispatchEvent(new CustomEvent('task-completed', { \n            detail: { taskId: updatedTask.id } \n          }));\n        } catch (error) {\n          console.error('Error completing task:', error);\n          // Re-enable button if completion failed\n          completeBtn.disabled = false;\n        }\n      });\n    }\n  }\n}\n","/**\n * TodayTasks.js - Today's Tasks Component\n * Manages the fixed header \"What's up today\" section\n */\n\nimport { createTaskCard } from './TaskCard.js';\nimport { dispatch } from '../state/appState.js';\nimport { getTodayFinDate } from '../utils/dateUtils.js';\n\n// DOM elements cache\nlet todayQuestsEl = null;\nlet todayEmptyStateEl = null;\n\n/**\n * Initialize the Today Tasks component\n * @param {Object} elements - DOM elements object\n */\nexport function initTodayTasks(elements) {\n  todayQuestsEl = elements.todayQuests;\n  todayEmptyStateEl = elements.todayEmptyState;\n  \n  if (!todayQuestsEl || !todayEmptyStateEl) {\n    console.error('Today tasks elements not found');\n    return;\n  }\n}\n\n/**\n * Render today's tasks in the fixed header\n * @param {Array} tasks - All tasks\n * @param {string} [todayFormatted] - Today's date in Finnish format (optional)\n */\nexport function renderTodayTasks(tasks, todayFormatted = null) {\n  if (!todayQuestsEl || !todayEmptyStateEl) {\n    console.error('Today tasks elements not initialized. Call initTodayTasks first.');\n    return;\n  }\n  \n  // Get today's date if not provided\n  if (!todayFormatted) {\n    todayFormatted = getTodayFinDate();\n  }\n  \n  // Clear previous content\n  todayQuestsEl.innerHTML = '';\n  \n  // Find today's incomplete tasks\n  const todayTasks = tasks.filter(task => \n    task.dueDate === todayFormatted && !task.completed\n  );\n  \n  // Handle empty state\n  if (todayTasks.length === 0) {\n    todayEmptyStateEl.style.display = 'flex';\n    return;\n  }\n  \n  // Hide empty state\n  todayEmptyStateEl.style.display = 'none';\n  \n  // Render today's tasks\n  todayTasks.forEach(task => {\n    const taskCard = createTaskCard(task, (taskId) => {\n      // Handle task completion\n      onTodayTaskCompleted(taskId);\n      \n      // Also dispatch a global event\n      dispatch('today-task-completed', { taskId, task });\n    });\n    \n    // Add a special class for today's task cards\n    taskCard.classList.add('today-task-card');\n    \n    todayQuestsEl.appendChild(taskCard);\n  });\n}\n\n/**\n * Handle completion of a task in the today section\n * @param {string} taskId - ID of the completed task\n */\nfunction onTodayTaskCompleted(taskId) {\n  if (!todayQuestsEl || !todayEmptyStateEl) return;\n  \n  // Remove the task card\n  const taskCard = todayQuestsEl.querySelector(`.quest-card[data-id=\"${taskId}\"]`);\n  if (taskCard) {\n    taskCard.remove();\n  }\n  \n  // Check if there are any tasks left\n  if (todayQuestsEl.children.length === 0) {\n    // Show empty state with celebration\n    todayEmptyStateEl.style.display = 'flex';\n    \n    // Add animation to the empty state\n    const celebrationText = todayEmptyStateEl.querySelector('.celebration-text');\n    if (celebrationText) {\n      celebrationText.classList.add('bounce');\n      \n      // Remove animation class after it completes\n      setTimeout(() => {\n        celebrationText.classList.remove('bounce');\n      }, 1000);\n    }\n  }\n}\n\n/**\n * Update the today tasks view when tasks are modified\n * @param {Object} detail - Event detail with updated task information\n */\nexport function handleTaskUpdate(detail) {\n  // Get the updated task or task ID\n  const { taskId, task } = detail;\n  \n  if (!taskId) return;\n  \n  // Check if this task is in the today section\n  const taskCard = todayQuestsEl.querySelector(`.quest-card[data-id=\"${taskId}\"]`);\n  \n  if (taskCard) {\n    // If the task was completed, remove it\n    if (task && task.completed) {\n      onTodayTaskCompleted(taskId);\n    }\n  }\n}\n\n/**\n * Add event listeners for task updates\n */\nexport function addTodayTasksEventListeners() {\n  // Listen for task completed events\n  document.addEventListener('task-completed', (event) => {\n    if (event.detail) {\n      handleTaskUpdate(event.detail);\n    }\n  });\n}\n","/**\n * StreakTracker.js - Streak Tracking Component\n * Manages streak visualization and celebration effects for engagement\n */\n\nimport { createConfetti, celebratePulse } from '../utils/animationUtils.js';\nimport { getState, setState, subscribe } from '../state/appState.js';\n\n// DOM elements cache\nlet streakCountEl = null;\nlet streakBarEl = null;\n\n/**\n * Initialize the Streak Tracker component\n * @param {Object} elements - DOM elements object\n */\nexport function initStreakTracker(elements) {\n  streakCountEl = elements.streakCount;\n  streakBarEl = elements.streakBar;\n  \n  if (!streakCountEl || !streakBarEl) {\n    console.error('Streak tracker elements not found');\n    return;\n  }\n  \n  // Subscribe to streak changes\n  subscribe(handleStreakChange, { path: 'streak' });\n}\n\n/**\n * Update the streak UI elements\n * @param {number} streakCount - Current streak count\n * @param {number} target - Target for streak completion\n */\nexport function updateStreakUI(streakData) {\n  if (!streakCountEl || !streakBarEl) {\n    console.error('Streak tracker elements not initialized. Call initStreakTracker first.');\n    return;\n  }\n  \n  const { count, target } = streakData;\n  \n  // Update streak count text\n  streakCountEl.textContent = count || '0';\n  \n  // Update progress bar width\n  const percentage = Math.min(100, Math.floor((count / target) * 100));\n  streakBarEl.style.width = `${percentage}%`;\n  \n  // Add color classes based on progress\n  streakBarEl.className = 'streak-bar'; // Reset classes\n  \n  if (percentage >= 100) {\n    streakBarEl.classList.add('streak-complete');\n  } else if (percentage >= 75) {\n    streakBarEl.classList.add('streak-near-complete');\n  } else if (percentage >= 50) {\n    streakBarEl.classList.add('streak-halfway');\n  } else if (percentage >= 25) {\n    streakBarEl.classList.add('streak-starting');\n  }\n}\n\n/**\n * Load streak data from localStorage\n * @returns {Object} The loaded streak data\n */\nexport function loadStreakData() {\n  try {\n    const savedStreak = localStorage.getItem('streak');\n    \n    if (savedStreak) {\n      const streakData = JSON.parse(savedStreak);\n      \n      // Update state with loaded streak data\n      setState({ streak: streakData }, 'streakTracker.loadStreakData');\n      \n      return streakData;\n    }\n  } catch (error) {\n    console.error('Error loading streak data from localStorage:', error);\n  }\n  \n  // Return default streak object if nothing was loaded\n  return getState().streak;\n}\n\n/**\n * Save streak data to localStorage\n * @param {Object} streakData - The streak data to save\n */\nexport function saveStreakData(streakData) {\n  try {\n    localStorage.setItem('streak', JSON.stringify(streakData));\n  } catch (error) {\n    console.error('Error saving streak data to localStorage:', error);\n  }\n}\n\n/**\n * Update streak information\n * Handles streak counting, local storage persistence, and visual feedback\n */\nexport function updateStreak() {\n  // Get current streak data\n  const { streak } = getState();\n  let { count, target, lastActive } = streak;\n  \n  // Get today's date\n  const today = new Date();\n  const todayStr = today.toDateString();\n  \n  // Initialize streak if this is the first time\n  if (!lastActive) {\n    const newStreak = {\n      count: 1,\n      target: target || 7,\n      lastActive: todayStr\n    };\n    \n    // Update state\n    setState({ streak: newStreak }, 'streakTracker.updateStreak');\n    \n    // Save to localStorage\n    saveStreakData(newStreak);\n    \n    return newStreak;\n  }\n  \n  // If user already used the app today, don't change the streak\n  if (lastActive === todayStr) {\n    return streak;\n  }\n  \n  // Convert lastActive to a Date object\n  const lastActiveDate = new Date(lastActive);\n  \n  // Calculate the difference in days\n  const diffTime = Math.abs(today - lastActiveDate);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  // Check if the streak is still active (used yesterday or today)\n  let newCount = count;\n  \n  if (diffDays <= 1) {\n    // Streak continues\n    newCount = count + 1;\n    \n    // Check for milestones\n    if (newCount % target === 0) {\n      // Target reached\n      celebrateStreakMilestone(newCount);\n    } else if (newCount === 3) {\n      // Small celebration at 3 days\n      celebrateStreakMilestone(3, 'small');\n    }\n  } else {\n    // Streak broken\n    newCount = 1;\n    \n    // Optional: Show a motivational message\n    console.log('Starting a new streak!');\n  }\n  \n  // Update streak data\n  const newStreak = {\n    count: newCount,\n    target: target || 7,\n    lastActive: todayStr\n  };\n  \n  // Update state\n  setState({ streak: newStreak }, 'streakTracker.updateStreak');\n  \n  // Save to localStorage\n  saveStreakData(newStreak);\n  \n  return newStreak;\n}\n\n/**\n * Celebrate reaching a streak milestone\n * @param {number} milestone - The milestone reached\n * @param {string} [size='normal'] - Size of celebration ('small', 'normal', 'large')\n */\nexport function celebrateStreakMilestone(milestone, size = 'normal') {\n  // Create a visual celebration\n  createConfetti();\n  \n  // Find elements to animate\n  const header = document.querySelector('.streak-tracker');\n  const streakCount = document.getElementById('streakCount');\n  \n  if (header) {\n    celebratePulse(header);\n  }\n  \n  if (streakCount) {\n    celebratePulse(streakCount);\n  }\n  \n  // Create a temporary celebration element for larger milestones\n  if (size !== 'small' && milestone >= 7) {\n    const celebration = document.createElement('div');\n    celebration.className = 'streak-celebration';\n    \n    let message = '';\n    \n    // Different messages based on milestone\n    if (milestone >= 30) {\n      message = `Amazing! ${milestone} day streak!`;\n    } else if (milestone >= 14) {\n      message = `Fantastic! ${milestone} day streak!`;\n    } else {\n      message = `${milestone} day streak! Keep it up!`;\n    }\n    \n    celebration.innerHTML = `\n      <div class=\"streak-message\">\n        <i class=\"ri-award-fill\"></i>\n        <h3>${message}</h3>\n        <p>You're building a great habit!</p>\n      </div>\n    `;\n    \n    // Append to body\n    document.body.appendChild(celebration);\n    \n    // Force reflow\n    void celebration.offsetWidth;\n    \n    // Add visible class to trigger animation\n    celebration.classList.add('visible');\n    \n    // Remove after animation completes\n    setTimeout(() => {\n      celebration.classList.remove('visible');\n      setTimeout(() => celebration.remove(), 500);\n    }, 4000);\n  }\n}\n\n/**\n * Handle streak changes from state updates\n * @param {Object} streakData - Updated streak data\n */\nfunction handleStreakChange(streakData) {\n  // Update UI with new streak data\n  updateStreakUI(streakData);\n}\n","/**\n * ChoreModal.js - Chore Modal Component\n * Controls the modal for adding new chores\n */\n\nimport { addChore } from '../services/taskService.js';\n\n// DOM elements cache\nlet choreModal = null;\nlet closeModalBtn = null;\nlet addChoreBtn = null;\nlet addChoreSubmitBtn = null;\nlet choreDescriptionInput = null;\nlet chorePointsInput = null;\n\n/**\n * Initialize the Chore Modal component\n * @param {Object} elements - DOM elements object\n */\nexport function initChoreModal(elements) {\n  choreModal = elements.choreModal;\n  closeModalBtn = elements.closeModalBtn;\n  addChoreBtn = elements.addChoreBtn;\n  addChoreSubmitBtn = elements.addChoreSubmitBtn;\n  choreDescriptionInput = elements.choreDescriptionInput;\n  chorePointsInput = elements.chorePointsInput;\n  \n  if (!choreModal || !closeModalBtn || !addChoreBtn || \n      !addChoreSubmitBtn || !choreDescriptionInput || !chorePointsInput) {\n    console.error('Chore modal elements not found');\n    return;\n  }\n  \n  // Add event listeners\n  addEventListeners();\n}\n\n/**\n * Add event listeners for the chore modal\n */\nfunction addEventListeners() {\n  // Show modal when add chore button is clicked\n  if (addChoreBtn) {\n    addChoreBtn.addEventListener('click', showModal);\n  }\n  \n  // Close modal when close button is clicked\n  if (closeModalBtn) {\n    closeModalBtn.addEventListener('click', hideModal);\n  }\n  \n  // Submit form when add button is clicked\n  if (addChoreSubmitBtn) {\n    addChoreSubmitBtn.addEventListener('click', handleSubmit);\n  }\n  \n  // Close modal when clicking outside\n  if (choreModal) {\n    choreModal.addEventListener('click', (e) => {\n      // Only close if the click was directly on the modal background\n      if (e.target === choreModal) {\n        hideModal();\n      }\n    });\n  }\n  \n  // Add keyboard shortcuts\n  document.addEventListener('keydown', (e) => {\n    // Close modal on Escape key\n    if (e.key === 'Escape' && isModalVisible()) {\n      hideModal();\n    }\n    \n    // Submit on Enter key when description input is focused\n    if (e.key === 'Enter' && document.activeElement === choreDescriptionInput) {\n      handleSubmit();\n    }\n  });\n}\n\n/**\n * Show the chore modal\n */\nexport function showModal() {\n  if (!choreModal) return;\n  \n  // Show the modal\n  choreModal.style.display = 'flex';\n  \n  // Focus the description input for immediate typing\n  if (choreDescriptionInput) {\n    choreDescriptionInput.focus();\n    \n    // Clear any previous input\n    choreDescriptionInput.value = '';\n  }\n  \n  // Reset points to default value\n  if (chorePointsInput) {\n    chorePointsInput.value = '5';\n  }\n  \n  // Disable scrolling on the body when modal is open\n  document.body.style.overflow = 'hidden';\n}\n\n/**\n * Hide the chore modal\n */\nexport function hideModal() {\n  if (!choreModal) return;\n  \n  // Hide the modal\n  choreModal.style.display = 'none';\n  \n  // Re-enable scrolling on the body\n  document.body.style.overflow = '';\n}\n\n/**\n * Check if the modal is currently visible\n * @returns {boolean} Whether the modal is visible\n */\nexport function isModalVisible() {\n  return choreModal && choreModal.style.display === 'flex';\n}\n\n/**\n * Handle chore form submission\n */\nasync function handleSubmit() {\n  if (!choreDescriptionInput || !chorePointsInput) return;\n  \n  // Get input values\n  const description = choreDescriptionInput.value.trim();\n  const points = parseInt(chorePointsInput.value, 10);\n  \n  // Validate inputs\n  if (!description) {\n    // Flash the input to indicate error\n    choreDescriptionInput.classList.add('error');\n    setTimeout(() => choreDescriptionInput.classList.remove('error'), 800);\n    return;\n  }\n  \n  if (isNaN(points) || points < 1) {\n    // Set a default value if invalid\n    chorePointsInput.value = '5';\n  }\n  \n  // Disable submit button and show loading state\n  if (addChoreSubmitBtn) {\n    addChoreSubmitBtn.disabled = true;\n    addChoreSubmitBtn.innerHTML = '<i class=\"ri-loader-4-line rotating\"></i> Adding...';\n  }\n  \n  try {\n    // Add the chore using the task service\n    await addChore({\n      description,\n      points: points || 5\n    });\n    \n    // Hide the modal\n    hideModal();\n    \n    // Show success notification\n    showNotification('Chore added successfully!', 'success');\n    \n  } catch (error) {\n    console.error('Error adding chore:', error);\n    showNotification('Failed to add chore. Please try again.', 'error');\n  } finally {\n    // Re-enable submit button\n    if (addChoreSubmitBtn) {\n      addChoreSubmitBtn.disabled = false;\n      addChoreSubmitBtn.innerHTML = 'Add Chore';\n    }\n  }\n}\n\n/**\n * Show a notification message\n * @param {string} message - The message to display\n * @param {string} type - Type of notification ('success', 'error', 'info')\n */\nfunction showNotification(message, type = 'info') {\n  // Check if notification container exists, create if not\n  let notificationContainer = document.getElementById('notifications');\n  \n  if (!notificationContainer) {\n    notificationContainer = document.createElement('div');\n    notificationContainer.id = 'notifications';\n    notificationContainer.className = 'notification-container';\n    document.body.appendChild(notificationContainer);\n  }\n  \n  // Create notification element\n  const notification = document.createElement('div');\n  notification.className = `notification ${type}`;\n  notification.innerHTML = `\n    <div class=\"notification-content\">\n      <p>${message}</p>\n    </div>\n  `;\n  \n  // Add to container\n  notificationContainer.appendChild(notification);\n  \n  // Force reflow\n  void notification.offsetWidth;\n  \n  // Add visible class to trigger animation\n  notification.classList.add('visible');\n  \n  // Remove after animation completes\n  setTimeout(() => {\n    notification.classList.remove('visible');\n    setTimeout(() => notification.remove(), 300);\n  }, 3000);\n}\n","/**\n * app.js - Quest Board ADHD-Optimized UI (Modular Version)\n * Main entry point that orchestrates module initialization\n */\n\n// Import utilities\nimport { initAnimationStyles } from './utils/animationUtils.js';\nimport { getTodayFinDate } from './utils/dateUtils.js';\nimport { calculateNextClassDay } from './utils/subjectUtils.js';\n\n// Import state management\nimport { \n  getState, \n  setState, \n  subscribe, \n  dispatch,\n  loadStateFromStorage,\n  saveStateToStorage\n} from './state/appState.js';\n\n// Import services\nimport { waitForFirebase } from './services/firebaseService.js';\nimport { \n  loadTasks, \n  loadStudents, \n  getFilteredTasks,\n  groupTasksByDueDate,\n  groupTasksByNextClass\n} from './services/taskService.js';\n\n// Import components\nimport { initTodayTasks, renderTodayTasks } from './components/TodayTasks.js';\nimport { initStreakTracker, updateStreak, loadStreakData } from './components/StreakTracker.js';\nimport { initChoreModal } from './components/ChoreModal.js';\nimport { createDateTaskList, createSubjectTaskList, createEmptyState } from './components/TaskList.js';\n\n// DOM elements\nconst elements = {\n  todayQuests: document.getElementById('today-quests'),\n  todayEmptyState: document.getElementById('today-empty-state'),\n  questContainer: document.getElementById('quest-container'),\n  noQuestsMessage: document.getElementById('no-quests'),\n  studentNameEl: document.getElementById('studentName'),\n  studentPointsEl: document.getElementById('studentPoints'),\n  loadingIndicator: document.getElementById('loading-indicator'),\n  filterButtons: document.querySelectorAll('.filter-btn'),\n  recentFilterText: document.getElementById('recentText'),\n  streakCount: document.getElementById('streakCount'),\n  streakBar: document.getElementById('streakBar'),\n  addChoreBtn: document.getElementById('addChoreBtn'),\n  choreModal: document.getElementById('choreModal'),\n  closeModalBtn: document.getElementById('closeModal'),\n  addChoreSubmitBtn: document.getElementById('addChoreSubmit'),\n  choreDescriptionInput: document.getElementById('choreDescription'),\n  chorePointsInput: document.getElementById('chorePoints'),\n  archiveIndicator: null, // Will be created dynamically\n  archiveToggle: null // Will be created dynamically\n};\n\n/**\n * Toggle the loading indicator visibility\n * @param {boolean} show - Whether to show or hide the loading indicator\n */\nfunction showLoading(show) {\n  if (!elements.loadingIndicator) {\n    console.warn('Loading indicator element not found');\n    return;\n  }\n  \n  elements.loadingIndicator.style.display = show ? 'flex' : 'none';\n}\n\n/**\n * Initialize app\n */\nasync function initializeApp() {\n  // Initialize animation styles\n  initAnimationStyles();\n  \n  // Restore scroll position if available\n  try {\n    const savedPosition = localStorage.getItem('scrollPosition');\n    if (savedPosition !== null) {\n      // Use setTimeout to ensure DOM is fully loaded before scrolling\n      setTimeout(() => {\n        window.scrollTo(0, parseInt(savedPosition, 10));\n      }, 100);\n    }\n  } catch (error) {\n    console.error('Error accessing localStorage:', error);\n  }\n  \n  try {\n    // Try to load saved streak data early\n    loadStreakData();\n  } catch (error) {\n    console.error('Error in initial streak setup:', error);\n  }\n  \n  // Show loading indicator\n  showLoading(true);\n  \n  try {\n    // Wait for Firebase to be initialized\n    await waitForFirebase();\n    \n    // Load data\n    await Promise.all([\n      loadTasks(),\n      loadStudents()\n    ]);\n    \n    // Initialize components\n    initializeComponents();\n    \n    // Render tasks\n    renderTasks();\n    \n    // Update streak information\n    updateStreak();\n    \n    // Add event listeners\n    initializeEventListeners();\n    \n  } catch (error) {\n    console.error('Error initializing app:', error);\n    alert('Could not connect to the database. Please check your internet connection and try again.');\n  } finally {\n    // Hide loading indicator\n    showLoading(false);\n  }\n  \n  // Save scroll position when user leaves the page\n  window.addEventListener('beforeunload', () => {\n    try {\n      localStorage.setItem('scrollPosition', window.scrollY);\n    } catch (error) {\n      console.error('Error accessing localStorage:', error);\n    }\n  });\n}\n\n/**\n * Initialize components\n */\nfunction initializeComponents() {\n  // Initialize Today Tasks component\n  initTodayTasks(elements);\n  \n  // Initialize Streak Tracker component\n  initStreakTracker(elements);\n  \n  // Initialize Chore Modal component\n  initChoreModal(elements);\n  \n  // Create archive controls\n  createArchiveControls();\n}\n\n/**\n * Initialize event listeners\n */\nfunction initializeEventListeners() {\n  // Filter buttons\n  elements.filterButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      // Remove active class from all buttons\n      elements.filterButtons.forEach(btn => btn.classList.remove('active'));\n      \n      // Add active class to clicked button\n      button.classList.add('active');\n      \n      // Get filter type from data attribute\n      const filter = button.dataset.filter;\n      \n      // Update state\n      setState({ activeFilter: filter }, 'filterButtonClick');\n      \n      // Render tasks with new filter\n      renderTasks();\n    });\n  });\n  \n  // Recent filter\n  elements.recentFilterText?.addEventListener('click', toggleRecentFilter);\n  \n  // Create archive toggle event listener\n  if (elements.archiveToggle) {\n    elements.archiveToggle.addEventListener('click', toggleArchiveView);\n  }\n  \n  // Subscribe to state changes\n  subscribe((newState, oldState, info) => {\n    // Re-render tasks if relevant state changed\n    if (\n      info.changedPaths.includes('tasks') ||\n      info.changedPaths.includes('activeFilter') ||\n      info.changedPaths.includes('showRecentOnly') ||\n      info.changedPaths.includes('showArchive')\n    ) {\n      renderTasks();\n    }\n    \n    // Update student info if it changed\n    if (info.changedPaths.includes('students')) {\n      updateStudentInfo();\n    }\n  });\n  \n  // Listen for task-completed events\n  document.addEventListener('task-completed', () => {\n    // Update streak when a task is completed\n    updateStreak();\n  });\n}\n\n/**\n * Create archive controls (indicator and toggle)\n */\nfunction createArchiveControls() {\n  // Create archive indicator\n  const indicator = document.createElement('div');\n  indicator.className = 'archive-indicator';\n  indicator.style.display = 'none';\n  elements.questContainer.parentNode.insertBefore(indicator, elements.questContainer.nextSibling);\n  elements.archiveIndicator = indicator;\n  \n  // Create archive toggle\n  const toggle = document.createElement('button');\n  toggle.className = 'archive-toggle';\n  toggle.innerHTML = `\n    <i class=\"ri-archive-line\"></i>\n    <span>Show Archive</span>\n  `;\n  elements.questContainer.parentNode.insertBefore(toggle, elements.questContainer.nextSibling);\n  elements.archiveToggle = toggle;\n}\n\n/**\n * Toggle between current and archive views\n */\nfunction toggleArchiveView() {\n  if (!elements.archiveToggle) return;\n  \n  // Get current state\n  const { showArchive } = getState();\n  \n  // Toggle archive view\n  setState({ showArchive: !showArchive }, 'toggleArchiveView');\n  \n  // Update button text\n  const toggleText = elements.archiveToggle.querySelector('span');\n  if (toggleText) {\n    toggleText.textContent = !showArchive ? 'Show Current' : 'Show Archive';\n  }\n  \n  // Update button icon\n  const toggleIcon = elements.archiveToggle.querySelector('i');\n  if (toggleIcon) {\n    toggleIcon.className = !showArchive ? 'ri-archive-fill' : 'ri-archive-line';\n  }\n  \n  // Add/remove active class\n  elements.archiveToggle.classList.toggle('active', !showArchive);\n  \n  // Render tasks with new filter\n  renderTasks();\n}\n\n/**\n * Render archive indicator\n * @param {number} archiveCount - Number of archived tasks\n */\nfunction renderArchiveIndicator(archiveCount) {\n  if (!elements.archiveIndicator) return;\n  \n  if (archiveCount > 0) {\n    elements.archiveIndicator.style.display = 'block';\n    elements.archiveIndicator.innerHTML = `\n      <i class=\"ri-archive-line\"></i>\n      ${archiveCount} task${archiveCount === 1 ? '' : 's'} in archive\n    `;\n  } else {\n    elements.archiveIndicator.style.display = 'none';\n  }\n}\n\n/**\n * Render tasks based on current filter\n */\nfunction renderTasks() {\n  if (!elements.questContainer) return;\n  \n  // Get today's date for comparison\n  const todayFormatted = getTodayFinDate();\n  \n  // Get current state\n  const { activeFilter, showRecentOnly, showArchive } = getState();\n  \n  // Get filtered tasks\n  const { tasks, archiveCount } = getFilteredTasks({\n    filter: activeFilter,\n    showRecentOnly,\n    showArchive\n  });\n  \n  // Clear container\n  elements.questContainer.innerHTML = '';\n  \n  // Update archive indicator\n  renderArchiveIndicator(archiveCount);\n  \n  // Handle empty state\n  if (tasks.length === 0) {\n    elements.noQuestsMessage.style.display = 'flex';\n    return;\n  }\n  \n  // Hide empty state\n  elements.noQuestsMessage.style.display = 'none';\n  \n  // Determine rendering method based on filter\n  if (activeFilter === 'subjects') {\n    // Group tasks by subject and render by next class day\n    const subjectGroups = groupTasksByNextClass(tasks);\n    renderTasksByNextClassGroups(subjectGroups, todayFormatted);\n  } else {\n    // Group tasks by due date and render chronologically\n    const dateGroups = groupTasksByDueDate(tasks);\n    renderTasksByDateGroups(dateGroups, todayFormatted);\n  }\n  \n  // Also update today's tasks section\n  renderTodayTasks(getState().tasks, todayFormatted);\n}\n\n/**\n * Render tasks grouped by date\n * @param {Object} dateGroups - Tasks grouped by date\n * @param {string} todayFormatted - Today's date for comparison\n */\nfunction renderTasksByDateGroups(dateGroups, todayFormatted) {\n  // Get dates sorted chronologically\n  const dates = Object.keys(dateGroups).sort((a, b) => {\n    // Compare dates (earliest first)\n    const dateA = new Date(a.split('.').reverse().join('-'));\n    const dateB = new Date(b.split('.').reverse().join('-'));\n    return dateA - dateB;\n  });\n  \n  // Render each date group\n  dates.forEach(date => {\n    const tasksForDate = dateGroups[date];\n    \n    // Create task list for this date\n    const dateTaskList = createDateTaskList(\n      date, \n      tasksForDate, \n      todayFormatted,\n      (taskId) => {\n        // Handle task completion\n        console.log(`Task ${taskId} completed`);\n        // No need to do anything else here as the state subscription will trigger re-render\n      }\n    );\n    \n    elements.questContainer.appendChild(dateTaskList);\n  });\n}\n\n/**\n * Render tasks grouped by their next class day\n * @param {Object} subjectGroups - Tasks grouped by subject\n * @param {string} todayFormatted - Today's date for comparison\n */\nfunction renderTasksByNextClassGroups(subjectGroups, todayFormatted) {\n  // Get subjects\n  const subjects = Object.keys(subjectGroups);\n  \n  // No subjects to display\n  if (subjects.length === 0) {\n    elements.questContainer.appendChild(\n      createEmptyState('No subject tasks found')\n    );\n    return;\n  }\n  \n  // Sort subjects by their next class day\n  subjects.sort((subjectA, subjectB) => {\n    const nextClassA = calculateNextClassDay(subjectA);\n    const nextClassB = calculateNextClassDay(subjectB);\n    \n    // If both have next class info\n    if (nextClassA.found && nextClassB.found) {\n      return nextClassA.daysUntil - nextClassB.daysUntil;\n    }\n    \n    // If only one has next class info\n    if (nextClassA.found) return -1;\n    if (nextClassB.found) return 1;\n    \n    // If neither has next class info, sort alphabetically\n    return subjectA.localeCompare(subjectB);\n  });\n  \n  // Render each subject group\n  subjects.forEach(subject => {\n    const tasksForSubject = subjectGroups[subject];\n    const nextClassInfo = calculateNextClassDay(subject);\n    \n    // Create task list for this subject\n    const subjectTaskList = createSubjectTaskList(\n      subject,\n      tasksForSubject,\n      nextClassInfo,\n      (taskId) => {\n        // Handle task completion\n        console.log(`Task ${taskId} completed`);\n        // No need to do anything else here as the state subscription will trigger re-render\n      }\n    );\n    \n    elements.questContainer.appendChild(subjectTaskList);\n  });\n}\n\n/**\n * Toggle recent filter\n */\nfunction toggleRecentFilter() {\n  // Toggle showRecentOnly state\n  const { showRecentOnly } = getState();\n  setState({ showRecentOnly: !showRecentOnly }, 'toggleRecentFilter');\n  \n  // Update indicator text\n  if (elements.recentFilterText) {\n    elements.recentFilterText.textContent = !showRecentOnly ? 'Show All' : 'Recent Only';\n    \n    // Update indicator icon\n    const icon = elements.recentFilterText.previousElementSibling;\n    if (icon && icon.classList.contains('ri-time-line')) {\n      icon.className = !showRecentOnly ? 'ri-calendar-line' : 'ri-time-line';\n    }\n  }\n}\n\n/**\n * Update student information display\n */\nfunction updateStudentInfo() {\n  const { students } = getState();\n  \n  if (!students || students.length === 0) return;\n  \n  // For now, just use the first student\n  const student = students[0];\n  \n  // Update student name\n  if (elements.studentNameEl && student.name) {\n    elements.studentNameEl.textContent = student.name;\n  }\n  \n  // Update student points\n  if (elements.studentPointsEl && student.points !== undefined) {\n    elements.studentPointsEl.textContent = student.points;\n  }\n}\n\n// Initialize app when DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', initializeApp);\n\n// Export functions for potential external use\nexport {\n  initializeApp,\n  renderTasks,\n  toggleRecentFilter,\n  toggleArchiveView\n};\n","/**\n * TaskList.js - Task List Component\n * Handles rendering lists of tasks grouped by date or class schedule\n */\n\nimport { createTaskCard } from './TaskCard.js';\nimport { isToday, isTomorrow, getRelativeDateText } from '../utils/dateUtils.js';\nimport { dispatch } from '../state/appState.js';\n\n/**\n * Create a date-based task list container\n * @param {string} date - The date in Finnish format (DD.MM.YYYY)\n * @param {Array} tasks - Array of tasks for this date\n * @param {string} todayFormatted - Today's date in Finnish format for comparison\n * @param {Function} onTaskCompleted - Callback for when a task is completed\n * @returns {HTMLElement} The task list container element\n */\nexport function createDateTaskList(date, tasks, todayFormatted, onTaskCompleted) {\n  const container = document.createElement('div');\n  container.className = 'quest-day';\n  container.dataset.date = date;\n  \n  // Create the date header with appropriate visual distinction\n  let dateClass = '';\n  let dateText = date;\n  \n  // Add visual distinction based on date relation to today\n  if (isToday(date)) {\n    dateClass = 'today';\n    dateText = 'Today';\n  } else if (isTomorrow(date)) {\n    dateClass = 'tomorrow';\n    dateText = 'Tomorrow';\n  } else {\n    // Get a human-readable date format\n    dateText = getRelativeDateText(date, todayFormatted);\n  }\n  \n  // Create date header\n  const dateHeader = document.createElement('div');\n  dateHeader.className = `quest-day-header ${dateClass}`;\n  dateHeader.innerHTML = `<h3 class=\"quest-day-title\">${dateText}</h3>`;\n  container.appendChild(dateHeader);\n  \n  // Create task list\n  const taskList = document.createElement('div');\n  taskList.className = 'quest-list';\n  \n  // Add tasks to the list\n  tasks.forEach(task => {\n    const taskCard = createTaskCard(task, (taskId) => {\n      if (onTaskCompleted && typeof onTaskCompleted === 'function') {\n        onTaskCompleted(taskId);\n      }\n      \n      // Also dispatch a global event\n      dispatch('task-completed', { taskId, task });\n    });\n    taskList.appendChild(taskCard);\n  });\n  \n  container.appendChild(taskList);\n  return container;\n}\n\n/**\n * Create a subject-based task list container\n * @param {string} subject - The subject name\n * @param {Array} tasks - Array of tasks for this subject\n * @param {Object} nextClassInfo - Information about when the next class occurs\n * @param {Function} onTaskCompleted - Callback for when a task is completed\n * @returns {HTMLElement} The task list container element\n */\nexport function createSubjectTaskList(subject, tasks, nextClassInfo, onTaskCompleted) {\n  const container = document.createElement('div');\n  container.className = 'quest-day subject-group';\n  container.dataset.subject = subject;\n  \n  // Create subject header with next class information\n  const subjectHeader = document.createElement('div');\n  subjectHeader.className = 'quest-day-header';\n  \n  let nextClassText = 'Not scheduled';\n  if (nextClassInfo && nextClassInfo.found) {\n    if (nextClassInfo.daysUntil === 0) {\n      nextClassText = 'Today';\n    } else if (nextClassInfo.daysUntil === 1) {\n      nextClassText = 'Tomorrow';\n    } else {\n      nextClassText = `${nextClassInfo.dayName} (in ${nextClassInfo.daysUntil} days)`;\n    }\n  }\n  \n  subjectHeader.innerHTML = `\n    <h3 class=\"quest-day-title\">${subject}</h3>\n    <div class=\"next-class-info\">Next: ${nextClassText}</div>\n  `;\n  container.appendChild(subjectHeader);\n  \n  // Create task list\n  const taskList = document.createElement('div');\n  taskList.className = 'quest-list';\n  \n  // Add tasks to the list\n  tasks.forEach(task => {\n    const taskCard = createTaskCard(task, (taskId) => {\n      if (onTaskCompleted && typeof onTaskCompleted === 'function') {\n        onTaskCompleted(taskId);\n      }\n      \n      // Also dispatch a global event\n      dispatch('task-completed', { taskId, task });\n    });\n    taskList.appendChild(taskCard);\n  });\n  \n  container.appendChild(taskList);\n  return container;\n}\n\n/**\n * Create an empty state container when no tasks are available\n * @param {string} message - Message to display\n * @returns {HTMLElement} Empty state container\n */\nexport function createEmptyState(message = 'No tasks found') {\n  const container = document.createElement('div');\n  container.className = 'empty-state-container';\n  container.style.display = 'flex';\n  \n  container.innerHTML = `\n    <div class=\"empty-state-content\">\n      <i class=\"ri-emotion-happy-line\"></i>\n      <h3>All done!</h3>\n      <p>${message}</p>\n    </div>\n  `;\n  \n  return container;\n}\n\n/**\n * Update tasks in an existing task list\n * @param {HTMLElement} listElement - The existing task list element\n * @param {Array} updatedTasks - Updated tasks data\n * @param {Function} onTaskCompleted - Callback for when a task is completed \n */\nexport function updateTaskList(listElement, updatedTasks, onTaskCompleted) {\n  if (!listElement) return;\n  \n  // Clear existing tasks\n  const taskList = listElement.querySelector('.quest-list');\n  if (!taskList) return;\n  \n  taskList.innerHTML = '';\n  \n  // Add updated tasks\n  updatedTasks.forEach(task => {\n    const taskCard = createTaskCard(task, (taskId) => {\n      if (onTaskCompleted && typeof onTaskCompleted === 'function') {\n        onTaskCompleted(taskId);\n      }\n      \n      // Also dispatch a global event\n      dispatch('task-completed', { taskId, task });\n    });\n    taskList.appendChild(taskCard);\n  });\n}\n","/**\n * index.js - Main entry point\n * Exports all modules for easy access\n */\n\n// Re-export utilities\nexport * from './utils/dateUtils.js';\nexport * from './utils/subjectUtils.js';\nexport * from './utils/animationUtils.js';\n\n// Re-export state management\nexport * from './state/appState.js';\n\n// Re-export services\nexport * from './services/firebaseService.js';\nexport * from './services/taskService.js';\n\n// Re-export components\nexport * from './components/TaskCard.js';\nexport * from './components/TaskList.js';\nexport * from './components/TodayTasks.js';\nexport * from './components/StreakTracker.js';\nexport * from './components/ChoreModal.js';\n\n// Re-export main app\nexport * from './app.js';\n\n// Import the app to initialize it\nimport { initializeApp } from './app.js';\n\n// Initialize app when DOM is fully loaded if not already handled\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeApp);\n} else {\n  // DOM already loaded, initialize immediately\n  initializeApp();\n}\n"],"names":["DEFAULT_SCHEDULE","main","alternative","SUBJECT_COLORS","calculateNextClassDay","subject","scheduleConfig","currentDayNumber","Date","getDay","adjustedCurrentDay","subjectNormalized","toLowerCase","schedule","subjectKey","Object","keys","find","key","console","warn","found","daysUntil","nextDay","dayName","classDays","length","sortedClassDays","sort","a","b","nextDayNumber","Infinity","dayNumber","subscribers","global","paths","events","_state","students","tasks","activeFilter","filteredLists","showRecentOnly","lastScrollPosition","showArchive","streak","count","target","lastActive","getState","setState","update","source","prevState","changedPaths","findChangedPaths","newState","forEach","callback","error","path","some","changedPath","startsWith","pathValue","split","reduce","obj","prop","undefined","getStateSlice","prevPathValue","notifySubscribers","subscribe","options","event","push","filter","cb","dispatch","eventName","payload","result","Array","isArray","i","JSON","stringify","Set","childPath","_firebaseModules","_db","_initialized","_initPromise","waitForFirebase","Promise","resolve","reject","log","db","modules","window","firebaseModules","firebaseReadyListener","clearTimeout","timeoutId","Error","addEventListener","once","setTimeout","removeEventListener","document","getElementById","innerHTML","e","_queryCache","Map","clearCache","cacheKey","delete","clear","generateCacheKey","collectionName","queryParams","async","fetchCollection","useCache","cacheTTL","has","cached","get","expiry","now","data","collection","getDocs","documents","docs","map","doc","id","set","updateDocument","documentId","updateDoc","docRef","getTodayFinDate","today","getDate","toString","padStart","getMonth","getFullYear","parseFinDate","finDate","test","day","month","year","part","parseInt","dateObj","original","adjusted","compareDates","date1","date2","d1","d2","setHours","loadTasks","loadStudents","celebratePulse","element","classList","add","remove","createTaskCard","task","onCompleted","taskCard","createElement","className","completed","dataset","type","color","normalizedSubject","hash","charCodeAt","substr","getSubjectColor","cardStyle","pointsText","points","description","completedDate","createTaskCardContent","completeBtn","querySelector","preventDefault","stopPropagation","disabled","taskId","state","taskIndex","findIndex","updatedTask","updatedAt","student","newPoints","s","updatedTasks","completeTask","elementRect","getBoundingClientRect","clone","cloneNode","style","position","left","top","width","height","margin","zIndex","transition","pointerEvents","body","appendChild","stamp","textContent","offsetWidth","transform","opacity","playCompletionAnimation","todayQuestsEl","todayEmptyStateEl","streakCountEl","streakBarEl","saveStreakData","streakData","localStorage","setItem","updateStreak","todayStr","toDateString","newStreak","lastActiveDate","diffTime","Math","abs","newCount","ceil","celebrateStreakMilestone","milestone","size","confettiContainer","colors","confetti","random","backgroundColor","floor","borderRadius","startPositionX","startPositionY","velocityX","velocityY","maxHeight","offsetHeight","positionX","positionY","currentVelocityX","currentVelocityY","rotation","animate","requestAnimationFrame","createConfetti","header","streakCount","celebration","message","handleStreakChange","percentage","min","updateStreakUI","choreModal","closeModalBtn","addChoreBtn","addChoreSubmitBtn","choreDescriptionInput","chorePointsInput","showModal","display","focus","value","overflow","hideModal","handleSubmit","trim","isNaN","choreData","timestamp","newTask","assignDate","dueDate","createdAt","setDoc","setDocument","taskWithId","addChore","showNotification","notificationContainer","notification","elements","todayQuests","todayEmptyState","questContainer","noQuestsMessage","studentNameEl","studentPointsEl","loadingIndicator","filterButtons","querySelectorAll","recentFilterText","streakBar","archiveIndicator","archiveToggle","showLoading","show","initializeApp","styleSheet","head","initAnimationStyles","savedPosition","getItem","scrollTo","savedStreak","parse","loadStreakData","all","initStreakTracker","activeElement","initChoreModal","indicator","parentNode","insertBefore","nextSibling","toggle","createArchiveControls","renderTasks","button","btn","toggleRecentFilter","toggleArchiveView","oldState","info","includes","name","updateStudentInfo","alert","scrollY","toggleText","toggleIcon","todayFormatted","archiveCount","allTasks","taskDate","current","archive","thresholdDate","setDate","dateToUse","getTaskContainers","currentCount","getFilteredTasks","renderArchiveIndicator","subjectGroups","groups","groupTasksByNextClass","subjects","subjectA","subjectB","nextClassA","nextClassB","localeCompare","subjectTaskList","nextClassInfo","onTaskCompleted","container","subjectHeader","nextClassText","taskList","createSubjectTaskList","createEmptyState","renderTasksByNextClassGroups","dateGroups","groupTasksByDueDate","reverse","join","date","dateTaskList","dateClass","dateText","tomorrow","isTomorrow","todayDate","comparison","diffDays","getRelativeDateText","dateHeader","createDateTaskList","renderTasksByDateGroups","todayTasks","children","celebrationText","onTodayTaskCompleted","renderTodayTasks","icon","previousElementSibling","contains","readyState"],"sourceRoot":""}